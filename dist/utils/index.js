"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.includes"),require("core-js/modules/es.array.iterator"),require("core-js/modules/es.array.sort"),require("core-js/modules/es.string.split"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.shouldScanWithAmap=exports.getOpenPortsWithMasscan=exports.getOpenUdpPortsWithNmap=exports.getOpenPortsWithNmap=exports.getGateway=exports.enumerate=exports.debug=exports.byIpAddress=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_os=require("os"),_path=require("path"),_util=require("util"),_fsExtra=require("fs-extra"),_execa=_interopRequireDefault(require("execa")),_tomoCli=require("tomo-cli");const append=(0,_util.promisify)(_fsExtra.appendFile),includes=a=>b=>b.includes(a),getPort=a=>/\d*?(?=\/)/i.exec(a)[0],byIpAddress=()=>{const c=a=>+a.split(".").map(a=>`000${a}`.slice(-3)).join("");// eslint-disable-line no-magic-numbers
return(d,a)=>c(d)-c(a)};exports.byIpAddress=byIpAddress;const debug=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a,b=""){const c=(0,_path.join)((0,_os.homedir)(),".pwngoal"),[d]=new Date().toISOString().split("T"),e=new Date().toLocaleTimeString("en-US",{hour12:!1});try{yield(0,_fsExtra.mkdirp)(c),yield append(`${c}/debug`,`[${`${d} ${e}`}] ${b}${_os.EOL}`),yield append(`${c}/debug`,(0,_tomoCli.format)(a)),yield append(`${c}/debug`,`${_os.EOL}`)}catch(a){/* do nothing */}});return function(){return a.apply(this,arguments)}}();exports.debug=debug;const enumerate=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a,b,c="tcp"){const d=[];for(const e of b){const b=[a,"-p",e,"-sV"].concat("udp"===c?"-sU":[]),{stdout:f}=yield(0,_execa.default)("nmap",b);yield debug(f,`nmap ${b.join(" ")}`),f.split(_os.EOL).filter(includes(`/${c}`)).map(a=>a.split(" ").filter(Boolean)).forEach(([,,a,...b])=>{const f=c.toUpperCase(),g=b.join(" ");d.push({protocol:f,port:e,service:a,version:g})})}return d});return function(){return a.apply(this,arguments)}}();exports.enumerate=enumerate;const getGateway=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a="tap0"){const b=["route"],{stdout:c}=yield(0,_execa.default)("ip",b);yield debug(c,`ip ${b.join(" ")}`);const[d]=(c||"").split(_os.EOL).filter(includes("via")).filter(includes(a)).map(a=>a.split(" ")[2]);return d});return function(){return a.apply(this,arguments)}}();exports.getGateway=getGateway;const getOpenPortsWithNmap=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a){const b=[a,"--open","-p","0-65535"],{stdout:c}=yield(0,_execa.default)("nmap",b);yield debug(c,`nmap ${b.join(" ")}`);const d=(c||"").split(_os.EOL).filter(includes("/tcp")).map(getPort);return d});return function(){return a.apply(this,arguments)}}();exports.getOpenPortsWithNmap=getOpenPortsWithNmap;const getOpenUdpPortsWithNmap=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a){const b=[a,"--open","-sU","-T4","--max-retries",1],{stdout:c}=yield(0,_execa.default)("nmap",b);yield debug(c,`nmap ${b.join(" ")}`);const d=(c||"").split(_os.EOL).filter(includes("/udp")).map(getPort);return d});return function(){return a.apply(this,arguments)}}();exports.getOpenUdpPortsWithNmap=getOpenUdpPortsWithNmap;const getOpenPortsWithMasscan=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a,b="tap0"){const c=yield getGateway();yield debug({ip:a,rate:500,networkInterface:b,gateway:c});const d=[a,"-e",b,"--router-ip",c,"-p","0-65535","--rate",500],{stdout:e}=yield(0,_execa.default)("masscan",d);yield debug(e,`masscan ${d.join(" ")}`);const f=(e||"").split(_os.EOL).filter(includes("/tcp")).map(getPort).sort((c,a)=>c-a);return yield debug({ports:f},"TCP ports found with masscan"),f});return function(){return a.apply(this,arguments)}}();exports.getOpenPortsWithMasscan=getOpenPortsWithMasscan;const shouldScanWithAmap=({service:a,version:b})=>{const c="unknown"===a||a.includes("?"),d=0===b.length;return c||d};exports.shouldScanWithAmap=shouldScanWithAmap;