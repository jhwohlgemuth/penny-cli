"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.includes"),require("core-js/modules/es.array.iterator"),require("core-js/modules/es.array.sort"),require("core-js/modules/es.string.replace"),require("core-js/modules/es.string.split"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.getOpenPortsWithMasscan=exports.getOpenPortsWithNmap=exports.getGateway=exports.debug=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_os=require("os"),_path=require("path"),_util=require("util"),_fsExtra=require("fs-extra"),_execa=_interopRequireDefault(require("execa")),_tomoCli=require("tomo-cli");const append=(0,_util.promisify)(_fsExtra.appendFile),includes=a=>b=>b.includes(a),getPort=a=>/\d*?(?=\/)/i.exec(a)[0],debug=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a){const b=new Date().toISOString().replace(/T/," ").replace(/\..+/,""),c=(0,_path.join)((0,_os.homedir)(),".pwngoal");yield(0,_fsExtra.mkdirp)(c),yield append(`${c}/debug`,`[${b}]${_os.EOL}`),yield append(`${c}/debug`,(0,_tomoCli.format)(a)),yield append(`${c}/debug`,`${_os.EOL}${_os.EOL}`)});return function(){return a.apply(this,arguments)}}();exports.debug=debug;const getGateway=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a="tap0"){const{stdout:b}=yield(0,_execa.default)("ip",["route"]),[c]=b.split(_os.EOL).filter(includes("via")).filter(includes(a)).map(a=>a.split(" ")[2]);return c});return function(){return a.apply(this,arguments)}}();exports.getGateway=getGateway;const getOpenPortsWithNmap=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a){const{stdout:b}=yield(0,_execa.default)("nmap",[a,"--open","-p","0-65535"]),c=b.split(_os.EOL).filter(includes("/tcp")).map(getPort);return c||[]});return function(){return a.apply(this,arguments)}}();exports.getOpenPortsWithNmap=getOpenPortsWithNmap;const getOpenPortsWithMasscan=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a,b="tap0"){const c=yield getGateway(),{stdout:d}=yield(0,_execa.default)("masscan",[a,"-e",b,"--router-ip",c,"-p","0-65535","--rate",500]),e=d.split(_os.EOL).filter(includes("open port")).map(getPort).sort((c,a)=>c-a);return e||[]});return function(){return a.apply(this,arguments)}}();exports.getOpenPortsWithMasscan=getOpenPortsWithMasscan;