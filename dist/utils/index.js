"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.includes"),require("core-js/modules/es.array.iterator"),require("core-js/modules/es.array.sort"),require("core-js/modules/es.string.split"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.shouldScanWithAmap=exports.getOpenPortsWithMasscan=exports.getOpenUdpPortsWithNmap=exports.getOpenPortsWithNmap=exports.getGateway=exports.enumerate=exports.byIpAddress=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_os=require("os"),_execa=_interopRequireDefault(require("execa")),_tomoCli=require("tomo-cli"),_cli=require("../cli");const includes=a=>b=>b.includes(a),getPort=a=>/\d*?(?=\/)/i.exec(a)[0],byIpAddress=()=>{const c=a=>+a.split(".").map(a=>`000${a}`.slice(-3)).join("");// eslint-disable-line no-magic-numbers
return(d,a)=>c(d)-c(a)};exports.byIpAddress=byIpAddress;const enumerate=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a,b,c="tcp"){const d=[],e=c.toUpperCase();for(const f of b){const b=[a,"-p",f,"-sV"].concat("UDP"===e?"-sU":[]);try{const{stdout:a}=yield(0,_execa.default)("nmap",b);yield(0,_tomoCli.debug)(a,{title:`nmap ${b.join(" ")}`,filename:_cli.namespace}),a.split(_os.EOL).filter(includes(`/${c}`)).map(a=>a.split(" ").filter(Boolean)).forEach(([,,a,...b])=>{const c=b.join(" ");d.push({protocol:e,port:f,service:a,version:c})})}catch(a){yield(0,_tomoCli.debug)(a,{title:`Error during "nmap ${b.join(" ")}"`,filename:_cli.namespace});d.push({protocol:e,port:f,service:"ERROR",version:"Read debug log for details"})}}return d});return function(){return a.apply(this,arguments)}}();exports.enumerate=enumerate;const getGateway=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a="tap0"){const b=["route"],{stdout:c}=yield(0,_execa.default)("ip",b);yield(0,_tomoCli.debug)(c,{title:`ip ${b.join(" ")}`,filename:_cli.namespace});const[d]=(c||"").split(_os.EOL).filter(includes("via")).filter(includes(a)).map(a=>a.split(" ")[2]);return d});return function(){return a.apply(this,arguments)}}();exports.getGateway=getGateway;const getOpenPortsWithNmap=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a){const b=[a,"--open","-p","0-65535"],{stdout:c}=yield(0,_execa.default)("nmap",b);yield(0,_tomoCli.debug)(c,{title:`nmap ${b.join(" ")}`,filename:_cli.namespace});const d=(c||"").split(_os.EOL).filter(includes("/tcp")).map(getPort);return d});return function(){return a.apply(this,arguments)}}();exports.getOpenPortsWithNmap=getOpenPortsWithNmap;const getOpenUdpPortsWithNmap=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a){const b=[a,"--open","-sU","-T4","--max-retries",1],{stdout:c}=yield(0,_execa.default)("nmap",b);yield(0,_tomoCli.debug)(c,{title:`nmap ${b.join(" ")}`,filename:_cli.namespace});const d=(c||"").split(_os.EOL).filter(includes("/udp")).map(getPort);return d});return function(){return a.apply(this,arguments)}}();exports.getOpenUdpPortsWithNmap=getOpenUdpPortsWithNmap;const getOpenPortsWithMasscan=/*#__PURE__*/function(){var a=(0,_asyncToGenerator2.default)(function*(a,b="tap0"){const c=yield getGateway(b);yield(0,_tomoCli.debug)({ip:a,rate:500,networkInterface:b,gateway:c},{filename:_cli.namespace});const d=[a,"-e",b,"--router-ip",c,"-p","0-65535","--rate",500],{stdout:e}=yield(0,_execa.default)("masscan",d);yield(0,_tomoCli.debug)(e,{title:`masscan ${d.join(" ")}`,filename:_cli.namespace});const f=(e||"").split(_os.EOL).filter(includes("/tcp")).map(getPort).sort((c,a)=>c-a);return yield(0,_tomoCli.debug)({ports:f},{title:"TCP ports found with masscan",filename:_cli.namespace}),f});return function(){return a.apply(this,arguments)}}();exports.getOpenPortsWithMasscan=getOpenPortsWithMasscan;const shouldScanWithAmap=({service:a,version:b})=>{const c="unknown"===a||a.includes("?"),d=0===b.length;return c||d};exports.shouldScanWithAmap=shouldScanWithAmap;