"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.includes"),require("core-js/modules/es.array.iterator"),require("core-js/modules/es.string.split"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_os=require("os"),_isElevated=_interopRequireDefault(require("is-elevated")),_execa=_interopRequireDefault(require("execa")),_conf=_interopRequireDefault(require("conf")),_commandExists=_interopRequireDefault(require("command-exists")),_utils=require("../utils");const store=new _conf.default({projectName:"pwngoal"}),PRIMARY_SCANNER="masscan",SECONDARY_SCANNER="nmap";var _default={port:[{text:"Scan TCP ports with nmap",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0,optional:()=>_commandExists.default.sync("nmap")},{text:"You need to install nmap to scan a port...",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!1,optional:()=>!_commandExists.default.sync("nmap")}],ports:[{text:"Clear saved data",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a}){store.delete(a),store.delete("tcp.ports"),store.delete("udp.ports")});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0},{text:`Find open TCP ports with ${PRIMARY_SCANNER}`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a}){const b=yield(0,_utils.getOpenPortsWithMasscan)(a);store.set("tcp.ports",b),yield(0,_utils.debug)({ports:b},`TCP ports from ${PRIMARY_SCANNER}`)});return function task(){return a.apply(this,arguments)}}(),condition:()=>_commandExists.default.sync(PRIMARY_SCANNER),optional:()=>_commandExists.default.sync(PRIMARY_SCANNER)},{text:`Find open TCP ports with ${SECONDARY_SCANNER}`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a}){const b=yield(0,_utils.getOpenPortsWithNmap)(a);store.set("tcp.ports",b),yield(0,_utils.debug)({ports:b},`TCP ports from ${SECONDARY_SCANNER}`)});return function task(){return a.apply(this,arguments)}}(),condition:()=>_commandExists.default.sync(SECONDARY_SCANNER)&&!_commandExists.default.sync(PRIMARY_SCANNER),optional:()=>_commandExists.default.sync(SECONDARY_SCANNER)&&!_commandExists.default.sync(PRIMARY_SCANNER)},{text:`Find open UDP ports with nmap`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a}){const b=yield(0,_utils.getOpenUdpPortsWithNmap)(a);store.set("udp.ports",b),yield(0,_utils.debug)({ports:b},`UDP ports from nmap`)});return function task(){return a.apply(this,arguments)}}(),condition:({udp:a})=>a&&_commandExists.default.sync("nmap")&&(0,_isElevated.default)(),optional:({udp:a})=>a&&_commandExists.default.sync("nmap")},{text:"Enumerate services with nmap",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,udp:b}){const c=[],d=store.get("tcp.ports")||[];yield(0,_utils.debug)({ports:d},"TCP ports passed to enumeration");for(const e of d){const{stdout:b}=yield(0,_execa.default)("nmap",[a,"-p",e,"-sV"]);b.split(_os.EOL).filter(a=>a.includes("/tcp")).map(a=>a.split(" ").filter(Boolean)).forEach(([,,a,...b])=>{const d=b.join(" ");c.push({protocol:"TCP",port:e,service:a,version:d})})}if(b&&(yield(0,_isElevated.default)()))for(const b of store.get("udp.ports")||[]){const{stdout:d}=yield(0,_execa.default)("nmap",[a,"-p",b,"-sV","-sU"]);d.split(_os.EOL).filter(a=>a.includes("/udp")).map(a=>a.split(" ").filter(Boolean)).forEach(([,,a,...d])=>{const e=d.join(" ");c.push({protocol:"UDP",port:b,service:a,version:e})})}store.set(a,c),yield(0,_utils.debug)({data:c},"Results of enumeration")});return function task(){return a.apply(this,arguments)}}(),condition:()=>_commandExists.default.sync("nmap"),optional:()=>_commandExists.default.sync("nmap")},{text:"You need to install masscan or nmap to run a scan...",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!1,optional:()=>!(_commandExists.default.sync(PRIMARY_SCANNER)||_commandExists.default.sync(SECONDARY_SCANNER))}]};exports.default=_default;