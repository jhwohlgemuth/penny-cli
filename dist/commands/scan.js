"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.flat-map"),require("core-js/modules/es.array.includes"),require("core-js/modules/es.array.iterator"),require("core-js/modules/es.array.unscopables.flat-map"),require("core-js/modules/es.string.split"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_os=require("os"),_isElevated=_interopRequireDefault(require("is-elevated")),_execa=_interopRequireDefault(require("execa")),_commandExists=_interopRequireDefault(require("command-exists")),_tomoCli=require("tomo-cli"),_utils=require("../utils"),_cli=require("../cli");const PRIMARY_SCANNER="masscan",SECONDARY_SCANNER="nmap",makeKey=a=>a.split(".").join("_"),shouldPerformEnumeration=a=>{const b=a.get("tcp.ports")||[],c=a.get("udp.ports")||[];return 0<[...b,...c].length};var _default={port:[{text:"Scan TCP ports with nmap",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0,optional:()=>_commandExists.default.sync("nmap")},{text:"You need to install nmap to scan a port...",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!1,optional:()=>!_commandExists.default.sync("nmap")}],ports:[{text:"Clear saved data",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,store:b}){b.delete(makeKey(a)),b.delete("tcp.ports"),b.delete("udp.ports")});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0},{text:`Find open TCP ports with ${"masscan"}`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,networkInterface:b,store:c}){const d=yield(0,_utils.getOpenPortsWithMasscan)(a,b);yield(0,_tomoCli.debug)({ports:d},{title:`TCP ports from ${PRIMARY_SCANNER}`,filename:_cli.namespace}),c.set("tcp.ports",d)});return function task(){return a.apply(this,arguments)}}(),condition:({nmapOnly:a,udpOnly:b})=>!a&&!b&&_commandExists.default.sync(PRIMARY_SCANNER),optional:({nmapOnly:a})=>!a&&_commandExists.default.sync(PRIMARY_SCANNER)},{text:`Find open TCP ports with ${SECONDARY_SCANNER}`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,store:b}){const c=yield(0,_utils.getOpenPortsWithNmap)(a);yield(0,_tomoCli.debug)({ports:c},{title:`TCP ports from ${SECONDARY_SCANNER}`,filename:_cli.namespace}),b.set("tcp.ports",c)});return function task(){return a.apply(this,arguments)}}(),condition:({udpOnly:a})=>!a&&_commandExists.default.sync(SECONDARY_SCANNER)&&!_commandExists.default.sync(PRIMARY_SCANNER),optional:()=>_commandExists.default.sync(SECONDARY_SCANNER)&&!_commandExists.default.sync(PRIMARY_SCANNER)},{text:`Find open UDP ports with nmap`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,store:b}){const c=yield(0,_utils.getOpenUdpPortsWithNmap)(a);yield(0,_tomoCli.debug)({ports:c},{title:"UDP ports from nmap",filename:_cli.namespace}),b.set("udp.ports",c)});return function task(){return a.apply(this,arguments)}}(),condition:({udp:a,udpOnly:b})=>(a||b)&&_commandExists.default.sync("nmap")&&(0,_isElevated.default)(),optional:({udp:a,udpOnly:b})=>(a||b)&&_commandExists.default.sync("nmap")},{text:"Enumerate services with nmap and amap",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,store:b,udp:c,udpOnly:d}){let e=[];if(!d){const c=b.get(`tcp.ports`)||[];yield(0,_tomoCli.debug)({ports:c},{title:"TCP ports passed to enumeration",filename:_cli.namespace});const d=yield(0,_utils.enumerate)(a,c);e=[...e,...d]}if((c||d)&&(yield(0,_isElevated.default)())){const c=b.get("udp.ports")||[];yield(0,_tomoCli.debug)({ports:c},{title:"UDP ports passed to enumeration",filename:_cli.namespace});const d=yield(0,_utils.enumerate)(a,c,"udp");e=[...e,...d]}try{yield(0,_commandExists.default)("amap");for(const{port:b,protocol:c}of e.filter(_utils.shouldScanWithAmap)){const{stdout:d}=yield(0,_execa.default)("amap",["-q",a,b]);yield(0,_tomoCli.debug)({port:b,protocol:c},{title:"Port to scan with amap",filename:_cli.namespace}),yield(0,_tomoCli.debug)(d,{title:`amap -q ${a} ${b}`,filename:_cli.namespace});const f=e.findIndex(a=>a.port===b&&a.protocol===c),g=d.split(_os.EOL).filter(a=>a.includes("matches")).map(a=>a.split(" ").filter(Boolean)).flatMap(([,,,,a])=>a).join(" | ");e[f].version=g||"???"}}catch(a){yield(0,_tomoCli.debug)("amap not installed",{filename:_cli.namespace})}const f=makeKey(a);yield(0,_tomoCli.debug)({data:e},{title:`Results of enumeration for ${f}`,filename:_cli.namespace}),b.set(f,e)});return function task(){return a.apply(this,arguments)}}(),condition:({store:a})=>_commandExists.default.sync("nmap")&&shouldPerformEnumeration(a),optional:()=>_commandExists.default.sync("nmap")},{text:"You need to install masscan or nmap to run a scan...",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!1,optional:()=>!(_commandExists.default.sync(PRIMARY_SCANNER)||_commandExists.default.sync(SECONDARY_SCANNER))}]};exports.default=_default;