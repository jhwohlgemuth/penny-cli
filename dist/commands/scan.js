"use strict";var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.flat-map"),require("core-js/modules/es.array.includes"),require("core-js/modules/es.array.iterator"),require("core-js/modules/es.array.unscopables.flat-map"),require("core-js/modules/es.string.split"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_os=require("os"),_isElevated=_interopRequireDefault(require("is-elevated")),_execa=_interopRequireDefault(require("execa")),_conf=_interopRequireDefault(require("conf")),_commandExists=_interopRequireDefault(require("command-exists")),_utils=require("../utils");const store=new _conf.default({projectName:"pwngoal"}),makeKey=a=>a.split(".").join("_"),shouldPerformEnumeration=()=>{const a=store.get("tcp.ports")||[],b=store.get("udp.ports")||[];return 0<[...a,...b].length},PRIMARY_SCANNER="masscan",SECONDARY_SCANNER="nmap";var _default={port:[{text:"Scan TCP ports with nmap",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0,optional:()=>_commandExists.default.sync("nmap")},{text:"You need to install nmap to scan a port...",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!1,optional:()=>!_commandExists.default.sync("nmap")}],ports:[{text:"Clear saved data",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a}){store.clear(),store.delete(makeKey(a)),store.delete("tcp.ports"),store.delete("udp.ports")});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0},{text:`Find open TCP ports with ${PRIMARY_SCANNER}`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a}){const b=yield(0,_utils.getOpenPortsWithMasscan)(a);store.set("tcp.ports",b),yield(0,_utils.debug)({ports:b},`TCP ports from ${PRIMARY_SCANNER}`)});return function task(){return a.apply(this,arguments)}}(),condition:({udpOnly:a})=>!a&&_commandExists.default.sync(PRIMARY_SCANNER),optional:()=>_commandExists.default.sync(PRIMARY_SCANNER)},{text:`Find open TCP ports with ${SECONDARY_SCANNER}`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a}){const b=yield(0,_utils.getOpenPortsWithNmap)(a);store.set("tcp.ports",b),yield(0,_utils.debug)({ports:b},`TCP ports from ${SECONDARY_SCANNER}`)});return function task(){return a.apply(this,arguments)}}(),condition:({udpOnly:a})=>!a&&_commandExists.default.sync(SECONDARY_SCANNER)&&!_commandExists.default.sync(PRIMARY_SCANNER),optional:()=>_commandExists.default.sync(SECONDARY_SCANNER)&&!_commandExists.default.sync(PRIMARY_SCANNER)},{text:`Find open UDP ports with nmap`,task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a}){const b=yield(0,_utils.getOpenUdpPortsWithNmap)(a);store.set("udp.ports",b),yield(0,_utils.debug)({ports:b},`UDP ports from nmap`)});return function task(){return a.apply(this,arguments)}}(),condition:({udp:a,udpOnly:b})=>(a||b)&&_commandExists.default.sync("nmap")&&(0,_isElevated.default)(),optional:({udp:a,udpOnly:b})=>(a||b)&&_commandExists.default.sync("nmap")},{text:"Enumerate services with nmap",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,udp:b,udpOnly:c}){const d=[],e=store.get("tcp.ports")||[];if(yield(0,_utils.debug)({ports:e},"TCP ports passed to enumeration"),!c)for(const b of e){const{stdout:c}=yield(0,_execa.default)("nmap",[a,"-p",b,"-sV"]);c.split(_os.EOL).filter(a=>a.includes("/tcp")).map(a=>a.split(" ").filter(Boolean)).forEach(([,,a,...c])=>{const e=c.join(" ");d.push({protocol:"TCP",port:b,service:a,version:e})})}if((b||c)&&(yield(0,_isElevated.default)())){const b=store.get("udp.ports")||[];yield(0,_utils.debug)({ports:b},"UDP ports passed to enumeration");for(const c of b){const{stdout:b}=yield(0,_execa.default)("nmap",[a,"-p",c,"-sV","-sU"]);b.split(_os.EOL).filter(a=>a.includes("/udp")).map(a=>a.split(" ").filter(Boolean)).forEach(([,,a,...b])=>{const e=b.join(" ");d.push({protocol:"UDP",port:c,service:a,version:e})})}}if(yield(0,_commandExists.default)("amap")){const b=({service:a,version:b})=>{const c="unknown"===a||a.includes("?"),d=0===b.length;return c||d};for(const{port:c}of d.filter(b)){const{stdout:b}=yield(0,_execa.default)("amap",["-qAH",a,c]),e=d.findIndex(a=>a.port===c);yield(0,_utils.debug)(c,"Port scanned with amap");const f=b.split(_os.EOL).filter(a=>a.includes("matches")).map(a=>a.split(" ").filter(Boolean)).flatMap(([,,,,a])=>a).join(" | ");d[e].version=f||"???"}}store.set(makeKey(a),d),yield(0,_utils.debug)({data:d},"Results of enumeration")});return function task(){return a.apply(this,arguments)}}(),condition:()=>_commandExists.default.sync("nmap")&&shouldPerformEnumeration(),optional:()=>_commandExists.default.sync("nmap")},{text:"You need to install masscan or nmap to run a scan...",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!1,optional:()=>!(_commandExists.default.sync(PRIMARY_SCANNER)||_commandExists.default.sync(SECONDARY_SCANNER))}]};exports.default=_default;