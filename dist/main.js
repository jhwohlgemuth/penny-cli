"use strict";var _interopRequireWildcard=require("@babel/runtime/helpers/interopRequireWildcard"),_interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");require("core-js/modules/es.array.includes"),require("core-js/modules/es.array.iterator"),require("core-js/modules/es.string.split"),Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _is2=_interopRequireDefault(require("ramda/src/is")),_react=_interopRequireWildcard(require("react")),_propTypes=_interopRequireDefault(require("prop-types")),_conf=_interopRequireDefault(require("conf")),_chalk=require("chalk"),_figures=require("figures"),_ink=require("ink"),_inkBox=_interopRequireDefault(require("ink-box")),_inkTable=_interopRequireDefault(require("ink-table")),_tomoCli=require("tomo-cli"),_utils=require("./utils"),_commands=_interopRequireDefault(require("./commands"));const store=new _conf.default({projectName:"pwngoal"}),isTerminal=a=>["show","suggest"].includes(a),AnimatedIndicator=({complete:a,elapsed:b})=>{const c=()=>_react.default.createElement(_ink.Color,{cyan:!0},_figures.play),d=()=>_react.default.createElement(_ink.Color,{dim:!0},_figures.play),e=+b.split(":")[2]%3;return a?_react.default.createElement(_ink.Color,{dim:!0},"runtime"):_react.default.createElement(_ink.Box,null,0===e?_react.default.createElement(c,null):_react.default.createElement(d,null),1===e?_react.default.createElement(c,null):_react.default.createElement(d,null),2===e?_react.default.createElement(c,null):_react.default.createElement(d,null))},Timer=()=>{const[a]=process.hrtime(),[b,c]=(0,_react.useState)(!1),[d,e]=(0,_react.useState)("00:00:00");return(0,_react.useEffect)(()=>{const b=setInterval(()=>{e((0,_utils.getElapsedTime)(a))},1e3);global.PWNGOAL_CALLBACK=()=>{c(!0),clearInterval(b)}},[]),_react.default.createElement(_ink.Box,{marginTop:1,marginLeft:1},_react.default.createElement(AnimatedIndicator,{elapsed:d,complete:b}),_react.default.createElement(_ink.Text,null," ",d))},TerminalCommand=()=>((0,_react.useEffect)(()=>{},[]),_react.default.createElement(_tomoCli.UnderConstruction,null)),NoCommand=({options:a,store:b})=>{const{ip:c}=a,d=b.get(c)||[];(0,_react.useEffect)(()=>{},[]);const e=({ip:a})=>{const b=a=>"string"==typeof a&&0<a.length;return _react.default.createElement(_ink.Box,{flexDirection:"column"},_react.default.createElement(_ink.Box,null,_react.default.createElement(_ink.Text,null,"No results for "),_react.default.createElement(_ink.Color,{bold:!0,red:!0},b(a)?a:"nothing")),b(a)?_react.default.createElement(_react.Fragment,null):_react.default.createElement(_ink.Box,{marginLeft:1},"\u21B3  ",_react.default.createElement(_ink.Color,{dim:!0},"Did you mean to use \"pwngoal --help\"?")))};return e.propTypes={ip:_propTypes.default.string},0===d.length?_react.default.createElement(e,{ip:c}):_react.default.createElement(_react.Fragment,null,_react.default.createElement(_inkBox.default,{padding:{left:1,right:1},borderColor:"cyan"},_react.default.createElement(_ink.Color,{bold:!0,cyan:!0},c)),_react.default.createElement(_inkTable.default,{data:d}),_react.default.createElement(_ink.Box,{marginBottom:2,marginLeft:1},"\u21B3  ",_react.default.createElement(_ink.Color,{dim:!0},"Try \"pwngoal suggest\" to get some suggestiongs on what to do next")))},descriptions={enum:"Enumerate stuff",scan:"Scan stuff",port:`Scan a port with nmap`,ports:`Perform a full TCP port scan with masscan (or nmap)`,"reverse shell (php)":`Copy one-line reverse shell written in ${_chalk.bold.magenta("PHP")}`,"reverse shell (python)":`Copy one-line reverse shell written in ${_chalk.bold.yellow("Python")}`,"reverse shell (perl)":`Copy one-line reverse shell written in ${_chalk.bold.blue("Perl")}`,"reverse shell (ruby)":`Copy one-line reverse shell written in ${_chalk.bold.red("Ruby")}`,"reverse shell (bash)":`Copy one-line reverse shell written in ${_chalk.bold.bgBlack.white(" Bash ")}`,"reverse shell (awk)":`Copy one-line reverse shell written in ${_chalk.bold.bgBlack.white(" awk ")}`,"find files/folders with write access (linux)":`Find locations with ${(0,_chalk.bold)("write")} access during Linux ${_chalk.bold.cyan("privilege escalation")}`,"spawn a TTY shell (linux)":`Spawn a TTY shell with ${_chalk.bold.yellow("Python")}`};/**
 * Main tomo UI component
 * @param {Object} props Component props
 * @return {ReactComponent} Main tomo UI component
 */class UI extends _react.Component{constructor(a){super(a);const{flags:b,input:c}=a,{ignoreWarnings:d}=b,[e,...f]=c,g=(0,_is2.default)(String)(e),h=0<f.length,{intendedCommand:i,intendedTerms:j}=g?(0,_tomoCli.getIntendedInput)(_commands.default,e,f):{},k=(e!==i||h&&j.map((a,b)=>a!==f[b]).some(Boolean))&&!d;this.state={hasTerms:h,hasCommand:g,showWarning:k,intendedTerms:j,intendedCommand:i},this.updateWarning=this.updateWarning.bind(this),this.updateTerms=this.updateTerms.bind(this)}render(){const{done:a,flags:b}=this.props,{hasCommand:c,hasTerms:d,intendedCommand:e,intendedTerms:f,showWarning:g}=this.state;return _react.default.createElement(_tomoCli.ErrorBoundary,null,g?_react.default.createElement(_tomoCli.Warning,{callback:this.updateWarning},_react.default.createElement(_ink.Text,null,"Did you mean ",_react.default.createElement(_ink.Color,{bold:!0,green:!0},e," ",f.join(" ")),"?")):c&&d?_react.default.createElement(_react.Fragment,null,_react.default.createElement(Timer,null),_react.default.createElement(_tomoCli.TaskList,{commands:_commands.default,command:e,terms:f,options:b,done:a})):c?isTerminal(e)?_react.default.createElement(TerminalCommand,{command:e,store:store,options:b,done:a}):_react.default.createElement(_tomoCli.SubCommandSelect,{command:e,descriptions:descriptions,items:Object.keys(_commands.default[e]).map(a=>({label:a,value:a})),onSelect:this.updateTerms}):_react.default.createElement(NoCommand,{store:store,options:b,done:a}))}/**
     * Callback function for warning component
     * @param {string} data Character data from stdin
     * @return {undefined} Returns nothing
     */updateWarning(a){"\r"==a+""?this.setState({showWarning:!1}):process.exit(0)}/**
     * @param {Object} args Function options
     * @param {string} args.value Intended term
     * @return {undefined} Returns nothing
     */updateTerms({value:a}){this.setState({hasTerms:!0,intendedTerms:[a]})}}exports.default=UI,AnimatedIndicator.propTypes={complete:_propTypes.default.bool,elapsed:_propTypes.default.string},NoCommand.propTypes={done:_propTypes.default.func,options:_propTypes.default.object,store:_propTypes.default.object},TerminalCommand.propTypes={command:_propTypes.default.string,done:_propTypes.default.func,options:_propTypes.default.object,store:_propTypes.default.object},UI.propTypes={input:_propTypes.default.array,flags:_propTypes.default.object,done:_propTypes.default.func,stdin:_propTypes.default.string},UI.defaultProps={input:[],flags:{}};